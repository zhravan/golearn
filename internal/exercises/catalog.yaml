concepts:
- slug: 01_hello
  title: Hello, Go!
  test_regex: ".*"
  hints:
    - Implement Hello() to return 'Hello, Go!'
- slug: 02_values
  title: Values
  test_regex: ".*"
  hints:
    - Use fmt.Sprintf to format values.
- slug: 03_variables
  title: Variables
  test_regex: ".*"
  hints:
    - Use short declarations (:=) and return multiple values.
- slug: 04_constants
  title: Constants
  test_regex: ".*"
  hints:
    - Use math.Pi and constant expressions.
- slug: 05_for
  title: For
  test_regex: ".*"
  hints:
    - Accumulate a sum with a for loop.
- slug: 06_if_else
  title: If/Else
  test_regex: ".*"
  hints:
    - Handle negative, zero, and positive cases.
- slug: 07_switch
  title: Switch
  test_regex: ".*"
  hints:
    - Match multiple cases for weekend days.
- slug: 08_arrays
  title: Arrays
  test_regex: ".*"
  hints:
    - Iterate with range over a fixed-size array.
- slug: 09_slices
  title: Slices
  test_regex: ".*"
  hints:
    - Append values then compute a sum.
- slug: 10_maps
  title: Maps
  test_regex: ".*"
  hints:
    - Use strings.Fields and map[string]int for word counts.
- slug: 11_functions
  title: Functions
  test_regex: ".*"
  hints:
    - Pass a function and call it.
- slug: 12_multi_return
  title: Multiple Return Values
  test_regex: ".*"
  hints:
    - Return quotient, remainder, and an error for divide-by-zero.
- slug: 13_variadic
  title: Variadic Functions
  test_regex: ".*"
  hints:
    - Use '...' to accept any number of ints and sum them.
- slug: 14_closures
  title: Closures
  test_regex: ".*"
  hints:
    - Implement a function that returns a closure, capturing an outer variable.
- slug: 15_recursion
  title: Recursion
  test_regex: ".*"
  hints:
    - Implement a recursive factorial function.
- slug: 16_range_built_in
  title: Range over Built-in Types
  test_regex: ".*"
  hints:
    - Use range to iterate over a slice and a map.
- slug: 17_pointers
  title: Pointers
  test_regex: ".*"
  hints:
    - Write a function that takes a pointer, modifies the value, and returns the pointer.
- slug: 18_strings_runes
  title: Strings and Runes
  test_regex: ".*"
  hints:
    - Iterate over a string with range to count runes, and demonstrate string manipulation.
- slug: 19_structs
  title: Structs
  test_regex: ".*"
  hints:
    - Define a struct with fields for name and age, then create an instance.
- slug: 20_methods
  title: Methods
  test_regex: ".*"
  hints:
    - Add a method to a struct that calculates something based on its fields.
- slug: 21_interfaces
  title: Interfaces
  test_regex: ".*"
  hints:
    - Define an interface and implement it for a struct.
- slug: 22_enums
  title: Enums
  test_regex: ".*"
  hints:
    - Use iota to create a set of related constants as an enumeration.
- slug: 23_struct_embedding
  title: Struct Embedding
  test_regex: ".*"
  hints:
    - Embed one struct within another and access the inner struct's fields directly.
- slug: 24_generics
  title: Generics
  test_regex: ".*"
  hints:
    - Write a generic function that works with different types.
- slug: 25_range_iterators
  title: Range over Iterators
  test_regex: ".*"
  hints:
    - Implement a custom iterator and use range over it.
- slug: 26_errors
  title: Errors
  test_regex: ".*"
  hints:
    - Write a function that returns an error and handle it.
- slug: 27_custom_errors
  title: Custom Errors
  test_regex: ".*"
  hints:
    - Define a custom error type and return it from a function.
- slug: 37_xml
  title: XML Encoding and Decoding
  test_regex: ".*"
  hints:
    - Use encoding/xml package for marshaling and unmarshaling XML data.
    - Add XML struct tags using `xml:"fieldname"` to map struct fields to XML elements.
    - Use xml.Marshal to convert structs to XML bytes.
    - Use xml.Unmarshal to parse XML bytes into structs.

projects:
- slug: 101_text_analyzer
  title: Text Analyzer (Easy)
  test_regex: ".*"
  hints:
    - Implement functions to count characters, words, and unique words in a given text.
- slug: 102_shape_calculator
  title: Shape Area Calculator (Medium)
  test_regex: ".*"
  hints:
    - Define structs for different shapes, implement methods to calculate their areas, and use an interface for common shape behavior.
- slug: 103_task_scheduler
  title: Task Scheduler (Hard)
  test_regex: ".*"
  hints:
    - Create a task scheduler with features like adding/removing tasks, a custom iterator, closures for task execution, and custom error handling.
- slug: 104_http_server
  title: HTTP Server (Easy)
  test_regex: ".*"
  hints:
    - Implement a basic HTTP server that responds to GET requests.
- slug: 105_cli_todo_list
  title: CLI Todo List (Medium)
  test_regex: ".*"
  hints:
    - Build a command-line tool to manage a todo list, including adding, listing, and completing tasks.
- slug: 106_simple_chat_app
  title: Simple Chat Application (Medium)
  test_regex: ".*"
  hints:
    - Create a basic client-server chat application.
- slug: 107_image_processing_utility
  title: Image Processing Utility (Hard)
  test_regex: ".*"
  hints:
    - Develop a command-line utility for basic image transformations like resizing or converting to grayscale.
- slug: 108_basic_key_value_store
  title: Basic Key-Value Store (Hard)
  test_regex: ".*"
  hints:
    - Implement an in-memory key-value store with basic CRUD operations and optional persistence.
- slug: 36_json
  title: JSON
  test_regex: ".*"
  hints:
    - Use the encoding/json package to work with JSON data.
    - Implement MarshalPerson to convert a struct into JSON using json.Marshal.
    - Implement UnmarshalPerson to convert a JSON string into a struct using json.Unmarshal.
    - Handle and return errors properly in both functions.

- slug: 109_epoch
  title: "Epoch Conversion"
  difficulty: beginner
  topics: ["time", "epoch", "unix"]
  hints:
    - "Use Go's `time.Unix()` to convert an epoch to time."
    - "Use `t.Unix()` to convert time back to epoch."
    - "Remember Goâ€™s `time.Parse` can help parse date strings."

- slug: 37_waitGroup
  title: "WaitGroups"
  difficulty: beginner
  topics: ["waitGroup", "go"]
  hints:
    - "Use Go's waitGroups inorder to wait for the goroutines"

