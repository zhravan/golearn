concepts:
- slug: 01_hello
  title: Hello, Go!
  test_regex: ".*"
  hints:
    - Implement Hello() to return 'Hello, Go!'
- slug: 02_values
  title: Values
  test_regex: ".*"
  hints:
    - Use fmt.Sprintf to format values.
- slug: 03_variables
  title: Variables
  test_regex: ".*"
  hints:
    - Use short declarations (:=) and return multiple values.
- slug: 04_constants
  title: Constants
  test_regex: ".*"
  hints:
    - Use math.Pi and constant expressions.
- slug: 05_for
  title: For
  test_regex: ".*"
  hints:
    - Accumulate a sum with a for loop.
- slug: 06_if_else
  title: If/Else
  test_regex: ".*"
  hints:
    - Handle negative, zero, and positive cases.
- slug: 07_switch
  title: Switch
  test_regex: ".*"
  hints:
    - Match multiple cases for weekend days.
- slug: 08_arrays
  title: Arrays
  test_regex: ".*"
  hints:
    - Iterate with range over a fixed-size array.
- slug: 09_slices
  title: Slices
  test_regex: ".*"
  hints:
    - Append values then compute a sum.
- slug: 10_maps
  title: Maps
  test_regex: ".*"
  hints:
    - Use strings.Fields and map[string]int for word counts.
- slug: 11_functions
  title: Functions
  test_regex: ".*"
  hints:
    - Pass a function and call it.
- slug: 12_multi_return
  title: Multiple Return Values
  test_regex: ".*"
  hints:
    - Return quotient, remainder, and an error for divide-by-zero.
- slug: 13_variadic
  title: Variadic Functions
  test_regex: ".*"
  hints:
    - Use '...' to accept any number of ints and sum them.
- slug: 14_closures
  title: Closures
  test_regex: ".*"
  hints:
    - Implement a function that returns a closure, capturing an outer variable.
- slug: 15_recursion
  title: Recursion
  test_regex: ".*"
  hints:
    - Implement a recursive factorial function.
- slug: 16_range_built_in
  title: Range over Built-in Types
  test_regex: ".*"
  hints:
    - Use range to iterate over a slice and a map.
- slug: 17_pointers
  title: Pointers
  test_regex: ".*"
  hints:
    - Write a function that takes a pointer, modifies the value, and returns the pointer.
- slug: 18_strings_runes
  title: Strings and Runes
  test_regex: ".*"
  hints:
    - Iterate over a string with range to count runes, and demonstrate string manipulation.
- slug: 19_structs
  title: Structs
  test_regex: ".*"
  hints:
    - Define a struct with fields for name and age, then create an instance.
- slug: 20_methods
  title: Methods
  test_regex: ".*"
  hints:
    - Add a method to a struct that calculates something based on its fields.
- slug: 21_interfaces
  title: Interfaces
  test_regex: ".*"
  hints:
    - Define an interface and implement it for a struct.
- slug: 22_enums
  title: Enums
  test_regex: ".*"
  hints:
    - Use iota to create a set of related constants as an enumeration.
- slug: 23_struct_embedding
  title: Struct Embedding
  test_regex: ".*"
  hints:
    - Embed one struct within another and access the inner struct's fields directly.
- slug: 24_generics
  title: Generics
  test_regex: ".*"
  hints:
    - Write a generic function that works with different types.
- slug: 25_range_iterators
  title: Range over Iterators
  test_regex: ".*"
  hints:
    - Implement a custom iterator and use range over it.
- slug: 26_errors
  title: Errors
  test_regex: ".*"
  hints:
    - Write a function that returns an error and handle it.
- slug: 27_custom_errors
  title: Custom Errors
  test_regex: ".*"
  hints:
    - Define a custom error type and return it from a function.
- slug: 28_defer
  title: Defer
  test_regex: ".*"
  hints:
    - Use `f.Close()` with `defer` keyword.
- slug: 29_go_routines
  title: Go Routines
  test_regex: ".*"
  hints:
    - Use `go` keyword to execute functions concurrently using go routines.
- slug: 30_channels
  title: Channels
  test_regex: ".*"
  hints:
    - Use `make(chan T)` to create a channel and `<-` to send and receive on it.
- slug: 31_mutexes
  title: Mutexes
  test_regex: ".*"
  hints:
    - Use `sync.Mutex` to synchronize access to a shared resource.
- slug: 32_sorting
  title: Sorting
  test_regex: ".*"
  hints:
    - Use `slice.Sort` for sorting slices.
- slug: 33_string_formatting
  title: String Formatting
  test_regex: ".*"
  hints:
    - Use `fmt.Sprintf` and `%s`, `%d`, `%f` formatting directives to format strings, integers, and floats.
- slug: 34_channel_buffering
  title: Channel Buffering
  test_regex: ".*"
  hints:
    - Use `make(chan T, N)` to create a buffered channel and `<-` to send and receive on it.
- slug: 39_channel_directions
  title: Channel Directions
  test_regex: ".*"
  hints:
    - Create two channels, one for sending jobs and one for receiving results.
    - Start 5 workers using go routines.
    - Send 50 jobs to the worker pool.
    - Receive results from the worker pool and store them in a `rs` slice.
    - Enforce type safety by specifying the channel directions in worker function.
- slug: 35_channel_sync
  title: Channel Synchronization
  test_regex: ".*"
  hints:
    - Use a buffered boolean channel and wait till go routine completes.
- slug: 37_xml
  title: XML Encoding and Decoding
  test_regex: ".*"
  hints:
    - Use encoding/xml package for marshaling and unmarshaling XML data.
    - Add XML struct tags using `xml:"fieldname"` to map struct fields to XML elements.
    - Use xml.Marshal to convert structs to XML bytes.
    - Use xml.Unmarshal to parse XML bytes into structs.
- slug: 40_channel_select
  title: Channel Select
  test_regex: ".*"
  hints:
    - Use `select` to handle multiple channel operations concurrently.
    - Use `time.After` to simulate a 5 microsecond timeout.
- slug: 41_time_delay
  title: "Delays and Timers in Go"
  difficulty: beginner
  topics: ["time", "sleep", "channels", "timer"]
  test_regex: ".*"
  hints:
    - "Use time.Sleep() to pause execution for a duration."
    - "Convert milliseconds to time.Duration using time.Millisecond."
    - "Use a buffered channel to send a signal after waiting."
    - "Use time.After or time.Sleep to trigger events after delays."
- slug: 42_wait_group
  title: WaitGroups
  test_regex: ".*"
  difficulty: beginner
  topics: ["concurrency", "sync", "goroutines"]
  hints:
    - "Use sync.WaitGroup to wait for all launched goroutines."
    - "Call wg.Add(1) before starting a goroutine and wg.Done() when it finishes."
    - "Close result channels after wg.Wait() so collectors can range over them."
    - "Capture loop variables correctly inside goroutines (e.g., `n := n`)."
    - "Return results as a slice — order does not need to match input order
- slug: 43_worker_pools
  title: Worker Pools
  test_regex: ".*"
  hints:
    - Create separate channels for jobs (send work) and results (receive processed data).
    - Launch multiple worker goroutines that read from jobs channel and write to results channel.
    - Use channel directions (<-chan for receive-only, chan<- for send-only) in worker function signature.
    - Close the jobs channel after sending all work to signal workers to finish.
    - Use strings.TrimSpace() to clean message strings by removing leading/trailing whitespace.
    - Collect exactly len(logs) results to ensure all work is processed.
    
projects:
- slug: 101_text_analyzer
  title: Text Analyzer (Easy)
  test_regex: ".*"
  hints:
    - Implement functions to count characters, words, and unique words in a given text.
- slug: 102_shape_calculator
  title: Shape Area Calculator (Medium)
  test_regex: ".*"
  hints:
    - Define structs for different shapes, implement methods to calculate their areas, and use an interface for common shape behavior.
- slug: 103_task_scheduler
  title: Task Scheduler (Hard)
  test_regex: ".*"
  hints:
    - Create a task scheduler with features like adding/removing tasks, a custom iterator, closures for task execution, and custom error handling.
- slug: 104_http_server
  title: HTTP Server (Easy)
  test_regex: ".*"
  hints:
    - Implement a basic HTTP server that responds to GET requests.
- slug: 105_cli_todo_list
  title: CLI Todo List (Medium)
  test_regex: ".*"
  hints:
    - Build a command-line tool to manage a todo list, including adding, listing, and completing tasks.
- slug: 106_simple_chat_app
  title: Simple Chat Application (Medium)
  test_regex: ".*"
  hints:
    - Create a basic client-server chat application.
- slug: 107_image_processing_utility
  title: Image Processing Utility (Hard)
  test_regex: ".*"
  hints:
    - Develop a command-line utility for basic image transformations like resizing or converting to grayscale.
- slug: 108_basic_key_value_store
  title: Basic Key-Value Store (Hard)
  test_regex: ".*"
  hints:
    - Implement an in-memory key-value store with basic CRUD operations and optional persistence.
- slug: 36_json
  title: JSON
  test_regex: ".*"
  hints:
    - Use the encoding/json package to work with JSON data.
    - Implement MarshalPerson to convert a struct into JSON using json.Marshal.
    - Implement UnmarshalPerson to convert a JSON string into a struct using json.Unmarshal.
    - Handle and return errors properly in both functions.

- slug: 109_epoch
  title: "Epoch Conversion"
  difficulty: beginner
  topics: ["time", "epoch", "unix"]
  hints:
    - "Use Go's `time.Unix()` to convert an epoch to time."
    - "Use `t.Unix()` to convert time back to epoch."
    - "Remember Go’s `time.Parse` can help parse date strings."

- slug: 37_sorting_by_functions
  title: "Sorting by Functions"
  difficulty: beginner
  topics: ["slices", "sorting", "functions"]
  hints:
      - "Implement sort.Interface with Len(), Less(), and Swap() methods"
      - "Create custom slice types like ByName and ByAge (e.g., type ByName []Person)"
      - "Use sort.Sort() to sort slices with your custom comparison logic"
      - "Remember to make copies of slices to avoid modifying the original"

- slug: 38_time_formatting
  title: "Time Formatting"
  difficulty: beginner
  topics: ["time", "formatting", "parsing"]
  hints:
      - "Use time.Now().Format() to format current time with a specific layout"
      - "Use time.Parse() to parse time strings with known layouts"
      - "Use time.LoadLocation() to work with different timezones"
      - "Extract time components using .Date() and .Clock() methods"

- slug: 39_panic
  title: Panic and Recover
  test_regex: ".*"
  hints:
    - "Use `panic()` to simulate runtime errors when appropriate."
    - "Use `defer` with `recover()` to catch and handle panics."
    - "Recovering from panics allows graceful handling of unexpected situations."
    - "Remember: `recover()` only works inside a deferred function."

- slug: 64_timers
  title: "Timers"
  difficulty: medium
  topics: ["time", "goroutines", "concurrency", "synchronization"]
  test_regex: ".*"
  hints:
    - "Use a map[string]*time.Timer to track active timers by key."
    - "Use a mutex to safely access the timers map concurrently."
    - "Start a timer with time.AfterFunc(d, fn) to run a callback after duration d."
    - "If Start is called again for an existing key, stop and replace the old timer."
    - "Stop should remove the timer from the map and prevent the callback from firing."
    - "Reset can call timer.Reset(d) to reschedule the same callback."
    - "Remember to remove timers from the map after they fire to avoid memory leaks."
    - "Write tests to verify Start, Stop, and Reset behavior, including concurrency scenarios."
    
- slug: 68_rate_limiting
  title: Rate Limiting
  test_regex: ".*"
  difficulty: medium
  topics: ["time", "concurrency", "maps"]
  hints:
    - "Implement a RateLimiter struct that tracks request timestamps per key using a map[string][]time.Time."
    - "Use a mutex to safely handle concurrent access to the map."
    - "In the Allow method, remove timestamps older than the interval and check if the number of recent requests exceeds the limit."
    - "Reset should clear the request history for a key; if the key does not exist, do nothing."
    - "Consider edge cases: multiple keys, concurrent access, and requests exactly at the interval boundary."
    - "In tests, use time.Sleep with a small buffer above the interval to avoid flakiness."
    - "Initialize the timestamps map in NewRateLimiter to prevent nil pointer errors."
